diff --git a/gcc/config/riscv/riscv.cc b/gcc/config/riscv/riscv.cc
index 4939d9964..8658e609c 100644
--- a/gcc/config/riscv/riscv.cc
+++ b/gcc/config/riscv/riscv.cc
@@ -125,8 +125,9 @@ struct GTY(())  riscv_frame_info {
   HOST_WIDE_INT arg_pointer_offset;
 };
 
+/* "WCH-Interrupt-fast" as a parameter of __attribute__((interrupt)) */
 enum riscv_privilege_levels {
-  UNKNOWN_MODE, USER_MODE, SUPERVISOR_MODE, MACHINE_MODE
+  UNKNOWN_MODE, USER_MODE, SUPERVISOR_MODE, MACHINE_MODE, WCH_FAST_MODE
 };
 
 struct GTY(())  machine_function {
@@ -3320,11 +3321,11 @@ riscv_handle_type_attribute (tree *node ATTRIBUTE_UNUSED, tree name, tree args,
 
 	  string = TREE_STRING_POINTER (cst);
 	  if (strcmp (string, "user") && strcmp (string, "supervisor")
-	      && strcmp (string, "machine"))
+	      && strcmp (string, "machine") && strcmp(string, "WCH-Interrupt-fast"))
 	    {
 	      warning (OPT_Wattributes,
 		       "argument to %qE attribute is not %<\"user\"%>, %<\"supervisor\"%>, "
-		       "or %<\"machine\"%>", name);
+		       "%<\"machine\"%> or %<\"WCH-Interrupt-fast\"%>", name);
 	      *no_add_attrs = true;
 	    }
 	}
@@ -3879,6 +3880,14 @@ riscv_frame_set (rtx mem, rtx reg)
   return set;
 }
 
+/* wch fast interrupt push fixed reg and ra reg by hardware */
+
+static bool
+riscv_wch_fast_interrupt_saved_reg (unsigned int regno)
+{
+  return (call_used_or_fixed_reg_p(regno) || (regno == RETURN_ADDR_REGNUM));
+}
+
 /* Return true if the current function must save register REGNO.  */
 
 static bool
@@ -3887,6 +3896,11 @@ riscv_save_reg_p (unsigned int regno)
   bool call_saved = !global_regs[regno] && !call_used_or_fixed_reg_p (regno);
   bool might_clobber = crtl->saves_all_registers
 		       || df_regs_ever_live_p (regno);
+  /* wch fast interrupt push register REGNO by hardware */
+  if (cfun->machine->interrupt_handler_p
+      && (cfun->machine->interrupt_mode == WCH_FAST_MODE)
+      && riscv_wch_fast_interrupt_saved_reg(regno))
+    return false;
 
   if (call_saved && might_clobber)
     return true;
@@ -4607,6 +4621,8 @@ riscv_expand_epilogue (int style)
 	emit_jump_insn (gen_riscv_mret ());
       else if (mode == SUPERVISOR_MODE)
 	emit_jump_insn (gen_riscv_sret ());
+      else if (mode == WCH_FAST_MODE)
+	emit_jump_insn (gen_riscv_mret ());  
       else
 	emit_jump_insn (gen_riscv_uret ());
     }
@@ -4619,6 +4635,12 @@ riscv_expand_epilogue (int style)
 bool
 riscv_epilogue_uses (unsigned int regno)
 {
+  /* wch fast interrupt pop register REGNO by hardware */
+  if (epilogue_completed && cfun->machine->interrupt_handler_p
+      && (cfun->machine->interrupt_mode == WCH_FAST_MODE)
+      && riscv_wch_fast_interrupt_saved_reg (regno))
+    return false;
+  
   if (regno == RETURN_ADDR_REGNUM)
     return true;
 
@@ -5348,6 +5370,8 @@ riscv_get_interrupt_type (tree decl)
 	return USER_MODE;
       else if (!strcmp (string, "supervisor"))
 	return SUPERVISOR_MODE;
+      else if (!strcmp (string, "WCH-Interrupt-fast"))
+	return WCH_FAST_MODE;   
       else /* Must be "machine".  */
 	return MACHINE_MODE;
     }
@@ -5499,6 +5523,12 @@ bool
 riscv_hard_regno_rename_ok (unsigned from_regno ATTRIBUTE_UNUSED,
 			    unsigned to_regno)
 {
+  /* wch fast interrupt push REG_NO can rename */
+  if (cfun->machine->interrupt_handler_p
+      && (cfun->machine->interrupt_mode == WCH_FAST_MODE)
+      && riscv_wch_fast_interrupt_saved_reg (to_regno))
+    return true;
+  
   /* Interrupt functions can only use registers that have already been
      saved by the prologue, even if they would normally be
      call-clobbered.  */
